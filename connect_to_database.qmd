# Connect to the database

## Getting started

To connect to databases we will use DBI package and CDMConnector, you can find more information about both packages in their websites:

-   DBI package website: <https://dbi.r-dbi.org/>

-   CDMConnector package website: <https://darwin-eu.github.io/CDMConnector/>

Connect to database (standard way) and set up the environment

## Load libraries

The following libraries will be used in this chapter: DBI, RPostgres, dplyr, dbplyr, usethis and here. If you do not have them installed you can install them with the following command:

```{r, echo = FALSE}
options(width = 80)
```


```{r, eval = FALSE}
install.packages(c("DBI", "RPostgres", "dplyr", "dbplyr", "usethis", "here"))
```

```{r, message=FALSE}
library(DBI)
library(RPostgres)
library(dplyr)
library(dbplyr)
library(usethis)
library(here)
```

## Credentials and database details

To create a connection to a database we need some parameters:

- `host`: it is the IP of the computer that contains the database in our case it will be always the same and you can check it [here](https://unioxfordnexus.sharepoint.com/:w:/r/sites/NDORMS-PDE/Shared%20Documents/OxInfer/Onboarding/Databases.docx?d=wb4b16650858b4206a3486f9bddd3e78b&csf=1&web=1&e=jNsYjc)

- `port`: port to connect, in our case it will be always the same and you can check it [here](https://unioxfordnexus.sharepoint.com/:w:/r/sites/NDORMS-PDE/Shared%20Documents/OxInfer/Onboarding/Databases.docx?d=wb4b16650858b4206a3486f9bddd3e78b&csf=1&web=1&e=jNsYjc)

- `dbname`: name of the database we want to connect, each database has a different name, link to the names of the databases hosted by our server: [link](https://unioxfordnexus.sharepoint.com/:w:/r/sites/NDORMS-PDE/Shared%20Documents/OxInfer/Onboarding/Databases.docx?d=wb4b16650858b4206a3486f9bddd3e78b&csf=1&web=1&e=jNsYjc)

- `user`: each individual has a user to connect to the database this is unique and nontransferable.

- `password`: associated to each user.

To get a user and password or if you are not sure of what are the parameters of a certain database you can ask [Hez](mailto:hezekiah.omulo@ndorms.ox.ac.uk).

## Create a connection

There are several ways to create a connection as seen [here](https://darwin-eu.github.io/CDMConnector/articles/a04_DBI_connection_examples.html) and this depends on the Database Management System (DBMS) of your back-end.

In our case for the moment all our databases are in [PostgreSQL](https://www.postgresql.org/) (also refereed as Postgres) one of the most popular free dbms that exist. To connect to a Postgres we have to populate with the following information the connection details:

```{r, eval = FALSE}
con <- dbConnect(drv = Postgres(),
                 dbname = "...",
                 host = "...",
                 port = "...",
                 user = "...",
                 password = "...")
```

To test that the connection that you created works you can test the following command:

```{r, eval = FALSE}
tbl(con, sql("SELECT * FROM public.person limit 1"))
```
```{r, echo = FALSE, output = FALSE}
if (Sys.getenv("EUNOMIA_DATA_FOLDER") == "") {
  Sys.setenv("EUNOMIA_DATA_FOLDER" = here::here())
  CDMConnector::downloadEunomiaData()
}
```
```{r, echo = FALSE}
con <- dbConnect(duckdb::duckdb(), CDMConnector::eunomia_dir())
tbl(con, sql("SELECT * FROM main.person limit 1"))
```

Note that the result will be different as this one is from a synthetic database.

We can have multiple connections open at the same time, but it is recommended to not open more than one connection simultaneously, and close connections when we finish using them.

Once checked that we are able to connect to the database we can disconnect:

```{r}
dbDisconnect(conn = con)
```

## Database schemas

Databases are organised in schemas. Schemas are the internal structure of a database, they are like "folders". In general when we work with an OMOP database we will have to schemas:

- `cdmSchema` this schema contains all the OMOP [Standard tables](https://ohdsi.github.io/CommonDataModel/images/cdm54.png). Typically we would only have reading permissions to this schema, because these tables are not meant to be edited.

- `writeSchema` this schema is usually empty and is for the user to save their tables (usually cohorts) of intermediate results that you want to keep or reuse later. Typically you would have writing and reading permissions for this schema. In our database we can only read and edit the tables that we created, so we can not edit or read other people tables. It is a good practice to write your own tables with a starting prefix so it is easier to avoid name conflicts.

For our databases the `cdmSchema = `**public** and the `writeSchema = `**results**.

## Create the cdm object

The cdm object is a structure on top of our database connection to access all the tables in a user-friendly way, see more information in the [CDMConnector website](https://darwin-eu.github.io/CDMConnector/)

To create our first cdm object we need first a connection to our back-end:

```{r, eval = FALSE}
con <- dbConnect(drv = Postgres(),
                 dbname = "...",
                 host = "...",
                 port = "...",
                 user = "...",
                 password = "...")
```
```{r, echo = FALSE}
con <- dbConnect(duckdb::duckdb(), CDMConnector::eunomia_dir())
```

And then we can create the cdm object:
```{r, eval = FALSE}
library(CDMConnector)
cdm <- cdmFromCon(con = con, cdmSchema = "public", writeSchema = "results")
```
```{r, echo = FALSE, output = FALSE}
library(CDMConnector)
cdm <- cdmFromCon(con = con, cdmSchema = "main", writeSchema = "main")
```

The cdm object has a print that shows all the tables that you are connected to:
```{r}
cdm
```

And you can easily access to one of this tables with:
```{r}
cdm$person
```

In the other tutorials you will learn more how to program and use the cdm object.

Once you finished using it you can close the connection of the cdm object with:

```{r}
cdmDisconnect(cdm)
```

This is equivalent to do:
```{r, eval = FALSE}
dbDisconnect(con)
```


## Change password

The database administrator will give us a password it is **extremely important** that you change it after you connect to the database for first time. To change your password you must:

1. open a connection to any of our databases:
```{r, eval = FALSE}
con <- dbConnect(drv = Postgres(),
                 dbname = "...", # here you can connect to any of our databases
                 host = "...",
                 port = "...",
                 user = "...",
                 password = "...")
```         

2. Change the password, to do so we have to run the following command:
```{r, eval = FALSE}
dbGetQuery(con, "ALTER USER xxxxx WITH PASSWORD 'xxxxxxxxxxx'")
```
Example:
```{r, eval = FALSE}
dbGetQuery(con, "ALTER USER martics WITH PASSWORD '12345678'")
```

Make sure that you chose an strong password, see the [University guide](https://www.infosec.ox.ac.uk/create-strong-passwords) for more information about strong and safe passwords.

3. Disconnect from the database:
```{r, eval = FALSE}
dbDisconnect(con)
```

4. Connect again with the new password to check that the change was done correctly:
```{r, eval = FALSE}
con <- dbConnect(drv = Postgres(),
                 dbname = "...",
                 host = "...",
                 port = "...",
                 user = "...",
                 password = "new_password")
```  

5. Disconnect from the database again:
```{r, eval = FALSE}
dbDisconnect(con)
```

*NOTE: even you connect to a particular database to change the password, username and password are unique for all databases, so changing it only once changes for any `dbname` in our evironment.

## Set your .Renviron

### What are secrets?

Connection to the database it is a repetitive process that you will repeat every day, but at the same time you need to keep all your database credentials safely guarded. The R environ file will help use to do so.

.Renviron is a file linked to your R session to safely save secrets. It is loaded at the beginning of each session and secrets are kept till the session is terminated or restarted.

To access to a secret you can type:
```{r}
Sys.getenv("MY_SECRET")
```

As we have just seen if a secret does not exist the output will be an empty string: `""`.

You can set a temporary secret using the following command:
```{r}
Sys.setenv(MY_SECRET = "123456789")
```

Then now if you run the same command than before you will get the value that we have just set back:

```{r}
Sys.getenv("MY_SECRET")
```

This value can be assigned to a variable as we would do as usual:
```{r}
x <- "123456789"
print(x)
```
```{r}
y <- Sys.getenv("MY_SECRET")
print(y)
```

As you can see `x` and `y` have the same value but if you share the code in the second case the code would only work if you have the same secret stored in your environment. This is very useful to store the connection details so even if you share your code you would not be share sensitive information.

There are two type of secrets:

- *temporal* (as we have just seen), these secrets only last for while the session is ongoing the moment that you restart or terminate it all the secrets will be gone, so it is not recommended to use temporal secrets.

- *permanent* (we will see in the next step), these secrets are kept across different sessions and will always be in your environment unless you explicitly delete them. These secrets are stored in the .Renviron file. We will use permanent secrets to store our database credentials.

You can read more about secrets [here](https://cran.r-project.org/web/packages/httr/vignettes/secrets.html).

*NOTE: you can see all the secrets of your R session running the following command:
```{r, eval = FALSE}
Sys.getenv()
```

### Set up your own .Renviron file

To open your .Renviron file you can run the following command:
```{r, eval = FALSE}
edit_r_environ()
```

There you can write secrets that you want to store
```{r}
MY_SECRET = "123456789"
```

It is like writing in the `Sys.setenv()` function, but these secrets will be permanent and always be loaded in your session.

Secrets are loaded every time our session starts, so if we modify the .Renviron file and we want the new secrets to be loaded we should restart the R session (Control+Shift+F10).

Try writing your username, password, port and host there and create a connection with the following code:

```{r, eval = FALSE}
con <- dbConnect(drv = Postgres(),
                 dbname = "...",
                 host = Sys.getenv("HOST"),
                 port = Sys.getenv("PORT"),
                 user = Sys.getenv("USER"),
                 password = Sys.getenv("PASSWORD"))
```


## Final remark

**YOU MUST NEVER INCLUDE CONNECTION DETAILS IN A SCRIPT THAT IS PUBLIC OR YOU SHARE WITH SOMEONE, EVEN IF YOU TRUST THAT PERSON OR IS IN THE SAME ORGANIZATION.**
